===============Clock Cycle 0===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000011001
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000011001
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
===============Clock Cycle 1===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 2===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===============Clock Cycle 3===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001111010000000100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001111010000000100000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===============Clock Cycle 4===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000110100010001000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000110100010001000000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001111
s2_rs1_out Output 00001
s2_rs2_out Output 01000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
s2_shift_val_out Output 1000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00001
 rs2_in Input  01000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1000
 rd_in Input  00000
 command_bits_in Input  00001111
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===============Clock Cycle 5===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0000000000000111111010011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0000000000000111111010011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000110
s2_rs1_out Output 00010
s2_rs2_out Output 10001
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0001
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00010
 rs2_in Input  10001
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0001
 rd_in Input  00000
 command_bits_in Input  00000110
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===============Clock Cycle 6===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000101110010000100001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000101110010000100001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000001111110
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000001111110
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 7===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000011000010010
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000011000010010
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000101
s2_rs1_out Output 00001
s2_rs2_out Output 11001
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1001
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00001
 rs2_in Input  11001
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1001
 rd_in Input  00001
 command_bits_in Input  00000101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000001111110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 8===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000011101010001000001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000011101010001000001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000000110000
s2_rd_out Output 10010
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000110000
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10010
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000001111110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000001111110
===============Clock Cycle 9===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000001100110011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000001100110011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000011
s2_rs1_out Output 00010
s2_rs2_out Output 10101
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0101
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00010
 rs2_in Input  10101
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0101
 rd_in Input  00001
 command_bits_in Input  00000011
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===============Clock Cycle 10===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000011000100001100010
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000011000100001100010
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000011001
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000011001
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
===============Clock Cycle 11===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001010110110011100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001010110110011100000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00010
s2_command_bits_out00000011
s2_rs1_out Output 00011
s2_rs2_out Output 00010
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0010
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00011
 rs2_in Input  00010
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0010
 rd_in Input  00010
 command_bits_in Input  00000011
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 12===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000001001010111011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000001001010111011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001010
s2_rs1_out Output 00111
s2_rs2_out Output 11011
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1011
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00111
 rs2_in Input  11011
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1011
 rd_in Input  00000
 command_bits_in Input  00001010
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 13===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1000001010010010101101100
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1000001010010010101101100
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000010010101
s2_rd_out Output 11011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000010010101
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  11011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 14===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0010000000000001110010011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0010000000000001110010011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01100
s2_command_bits_out00000000
s2_rs1_out Output 01011
s2_rs2_out Output 01001
s2_rs3_out Output 01010
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 10
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  10
 rs1_in Input  01011
 rs2_in Input  01001
 rs3_in Input  01010
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  01100
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 15===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001101001110110101000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001101001110110101000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  010
s2_immediate_16_out Output 0000000000011100
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000011100
 loadindex_in Input  010
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  11011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  11011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
===============Clock Cycle 16===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000000101111001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000000101111001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01000
s2_command_bits_out00001101
s2_rs1_out Output 01101
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01101
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01000
 command_bits_in Input  00001101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01100
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01100
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 17===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001111010100111001011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001111010100111001011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000001011
s2_rd_out Output 11001
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000001011
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  11001
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
===============Clock Cycle 18===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000001010000100
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000001010000100
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01011
s2_command_bits_out00001111
s2_rs1_out Output 01110
s2_rs2_out Output 01010
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1010
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01110
 rs2_in Input  01010
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1010
 rd_in Input  01011
 command_bits_in Input  00001111
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 19===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001100001000111100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001100001000111100000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000010100
s2_rd_out Output 00100
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000010100
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  00100
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  11001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  11001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
===============Clock Cycle 20===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000101111010000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000101111010000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001100
s2_rs1_out Output 01111
s2_rs2_out Output 00100
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0100
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01111
 rs2_in Input  00100
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0100
 rd_in Input  00000
 command_bits_in Input  00001100
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 21===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001101001111000001111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001101001111000001111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000001011110
s2_rd_out Output 10000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000001011110
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00100
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00100
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
===============Clock Cycle 22===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0010000000000100110010111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0010000000000100110010111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01111
s2_command_bits_out00001101
s2_rs1_out Output 10000
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  10000
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01111
 command_bits_in Input  00001101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
===============Clock Cycle 23===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000001001111000101111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000001001111000101111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  010
s2_immediate_16_out Output 0000000001001100
s2_rd_out Output 10111
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000001001100
 loadindex_in Input  010
 shift_val_in Input  0000
 rd_in Input  10111
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===============Clock Cycle 24===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000010110110001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000010110110001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01111
s2_command_bits_out00000001
s2_rs1_out Output 10001
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  10001
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01111
 command_bits_in Input  00000001
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01111
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  01111
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===============Clock Cycle 25===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000001011110111101111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000001011110111101111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000000101101
s2_rd_out Output 10001
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000101101
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10001
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10111
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  10111
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
===============Clock Cycle 26===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0000000000001111111110011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0000000000001111111110011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01111
s2_command_bits_out00000001
s2_rs1_out Output 01111
s2_rs2_out Output 01111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 1111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01111
 rs2_in Input  01111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1111
 rd_in Input  01111
 command_bits_in Input  00000001
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01111
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  01111
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
===============Clock Cycle 27===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000001101001010110011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000001101001010110011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000011111111
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000011111111
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
=============== EX_wB ===============
Inputs 
 dest_reg Output  10001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
===============Clock Cycle 28===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 10011
s2_command_bits_out00000001
s2_rs1_out Output 10101
s2_rs2_out Output 10100
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0100
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  10101
 rs2_in Input  10100
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0100
 rd_in Input  10011
 command_bits_in Input  00000001
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01111
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111
=============== EX_wB ===============
Inputs 
 dest_reg Output  01111
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
===============Clock Cycle 29===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111
===============Clock Cycle 30===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 31===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 32===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000000000000000000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000000000000000000000
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 33===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000101110010000100001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000101110010000100001
===Outputs ===
s2_regwrite_out Output  0
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  0
 bit23_24_in Input  11
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 34===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000011000010010
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000011000010010
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000101
s2_rs1_out Output 00001
s2_rs2_out Output 11001
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1001
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00001
 rs2_in Input  11001
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1001
 rd_in Input  00001
 command_bits_in Input  00000101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 35===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000011101010001000001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000011101010001000001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000000110000
s2_rd_out Output 10010
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000110000
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10010
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  0
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  0
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 36===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000001100110011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000001100110011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000011
s2_rs1_out Output 00010
s2_rs2_out Output 10101
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0101
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00010
 rs2_in Input  10101
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0101
 rd_in Input  00001
 command_bits_in Input  00000011
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===============Clock Cycle 37===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001111100000000100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001111100000000100000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000011001
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000011001
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
===============Clock Cycle 38===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000110100100001000000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000110100100001000000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001111
s2_rs1_out Output 00001
s2_rs2_out Output 10000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00001
 rs2_in Input  10000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  00000
 command_bits_in Input  00001111
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 39===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0000000000000111111010011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0000000000000111111010011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00000110
s2_rs1_out Output 00010
s2_rs2_out Output 10010
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0010
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00010
 rs2_in Input  10010
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0010
 rd_in Input  00000
 command_bits_in Input  00000110
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000110
===============Clock Cycle 40===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000101110010000100001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000101110010000100001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000001111110
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
 immediate_in Input  0000000001111110
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000000000000
===============Clock Cycle 41===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000011000010010
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000011000010010
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000101
s2_rs1_out Output 00001
s2_rs2_out Output 11001
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1001
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00001
 rs2_in Input  11001
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1001
 rd_in Input  00001
 command_bits_in Input  00000101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000001111110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 42===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000011101110001000001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000011101110001000001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000000110000
s2_rd_out Output 10010
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000110000
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10010
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000001111110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000011111111101000100000000001111110
===============Clock Cycle 43===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000001100110011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000001100110011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00001
s2_command_bits_out00000011
s2_rs1_out Output 00010
s2_rs2_out Output 10111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00010
 rs2_in Input  10111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  00001
 command_bits_in Input  00000011
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000
===============Clock Cycle 44===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000011000100001100010
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000011000100001100010
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000011001
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000011001
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000100110000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  10010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000001100000000000000000000
===============Clock Cycle 45===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001010001000011100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001010001000011100000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00010
s2_command_bits_out00000011
s2_rs1_out Output 00011
s2_rs2_out Output 00010
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0010
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00011
 rs2_in Input  00010
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0010
 rd_in Input  00010
 command_bits_in Input  00000011
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000100110000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000100110000000000000000000000000000000110
===============Clock Cycle 46===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000001001010111011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000001001010111011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001010
s2_rs1_out Output 00111
s2_rs2_out Output 00100
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0100
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  00111
 rs2_in Input  00100
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0100
 rd_in Input  00000
 command_bits_in Input  00001010
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 47===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1000001010010010101101100
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1000001010010010101101100
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000010010101
s2_rd_out Output 11011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
 immediate_in Input  0000000010010101
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  11011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00010
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00010
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000000000
===============Clock Cycle 48===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0010000000000001110010011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0010000000000001110010011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01100
s2_command_bits_out00000000
s2_rs1_out Output 01011
s2_rs2_out Output 01001
s2_rs3_out Output 01010
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 10
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  10
 rs1_in Input  01011
 rs2_in Input  01001
 rs3_in Input  01010
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0000
 rd_in Input  01100
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 49===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001101001110110101000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001101001110110101000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  010
s2_immediate_16_out Output 0000000000011100
s2_rd_out Output 10011
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000011100
 loadindex_in Input  010
 shift_val_in Input  0000
 rd_in Input  10011
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  11011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  11011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000010010101000000000000000000000000000000000000000000000000
===============Clock Cycle 50===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000000101111001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000000101111001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01000
s2_command_bits_out00001101
s2_rs1_out Output 01101
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01101
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01000
 command_bits_in Input  00001101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01100
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01100
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 51===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001111010100111001011
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001111010100111001011
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000001011
s2_rd_out Output 11001
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000001011
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  11001
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000
===============Clock Cycle 52===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0011000000000001010000100
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0011000000000001010000100
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01011
s2_command_bits_out00001111
s2_rs1_out Output 01110
s2_rs2_out Output 01010
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 1010
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01110
 rs2_in Input  01010
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  1010
 rd_in Input  01011
 command_bits_in Input  00001111
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 53===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001100001000111100000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001100001000111100000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  011
s2_immediate_16_out Output 0000000000010100
s2_rd_out Output 00100
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000010100
 loadindex_in Input  011
 shift_val_in Input  0000
 rd_in Input  00100
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  11001
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  11001
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000
===============Clock Cycle 54===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000101111010000
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000101111010000
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 00000
s2_command_bits_out00001100
s2_rs1_out Output 01111
s2_rs2_out Output 00100
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0100
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  01111
 rs2_in Input  00100
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110100000000000001100
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0100
 rd_in Input  00000
 command_bits_in Input  00001100
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01011
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  01011
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
===============Clock Cycle 55===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100001101001111000001111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100001101001111000001111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  001
s2_immediate_16_out Output 0000000001011110
s2_rd_out Output 10000
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 immediate_in Input  0000000001011110
 loadindex_in Input  001
 shift_val_in Input  0000
 rd_in Input  10000
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00100
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  00100
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000
===============Clock Cycle 56===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0010000000000100110010111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0010000000000100110010111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01111
s2_command_bits_out00001101
s2_rs1_out Output 10000
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  10000
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01111
 command_bits_in Input  00001101
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  00000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  00000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
===============Clock Cycle 57===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 1100000001001111000101111
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  1100000001001111000101111
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  010
s2_immediate_16_out Output 0000000001001100
s2_rd_out Output 10111
s2_command_bits_out00000000
s2_rs1_out Output 00000
s2_rs2_out Output 00000
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0000
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 00
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  00
 rs1_in Input  00000
 rs2_in Input  00000
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000001001100
 loadindex_in Input  010
 shift_val_in Input  0000
 rd_in Input  10111
 command_bits_in Input  00000000
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  10000
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
=============== EX_wB ===============
Inputs 
 dest_reg Output  10000
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===============Clock Cycle 58===============
=============== UUT ===============
=============== STAGE1 ===============
===Inputs ===
Instruction Input  - this will be constant as everything has finished loading 1100000000000000000000000
===Outputs ===
Instruction Output 0001000000000010110110001
=============== STAGE2 IF/ID DECODER ===============
===Inputs ===
s2 Instruction Input  0001000000000010110110001
===Outputs ===
s2_regwrite_out Output  1
s2_load_index_out Output  000
s2_immediate_16_out Output 0000000000000000
s2_rd_out Output 01111
s2_command_bits_out00000001
s2_rs1_out Output 10001
s2_rs2_out Output 00111
s2_rs3_out Output 00000
s2_rs1_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
s2_rs2_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
s2_rs3_val_out Output 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
s2_shift_val_out Output 0111
s2_ls_sa_hl_bits_out Output000
s2_bit23_24_out Output 11
=== IN/OUT ID_EX ===
 reg_write_in Input  1
 bit23_24_in Input  11
 rs1_in Input  10001
 rs2_in Input  00111
 rs3_in Input  00000
 rs1_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000000000000110
 rs2_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 rs3_in_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
 immediate_in Input  0000000000000000
 loadindex_in Input  000
 shift_val_in Input  0111
 rd_in Input  01111
 command_bits_in Input  00000001
 li_sa_ha_bits_in Input  000
===============STAGE 3 FOWARDING, ALU ===============
NOTE - ALL ID_EX OutputS ARE InputS HERE, SO Inputs  ARE NOT SPECIFIED EXCEPT FOR THE ONES COMING FROM EX_WB, ONLY OutputS ARE SPECIFIED FOR STAGE 3
===Inputs  S3 FOWARDING ===
 dest_reg Input  01111
 togglewb Input  1
===Inputs  S3 MUX ===
 write_val Input  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
===Outputs  ALU  === ALU OUT 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000000000000000000000000000000110
=============== EX_wB ===============
Inputs 
 dest_reg Output  01111
 togglewb Output  1
 write_val Output  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111100000000000000000
